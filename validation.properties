# The ESAPI validator does many security checks on input, such as canonicalization
# and whitelist validation. Note that all of these validation rules are applied *after*
# canonicalization. Double-encoded characters (even with different encodings involved,
# are never allowed.
#
# To use:
#
# First set up a pattern below. You can choose any name you want, prefixed by the word
# "Validation." For example:
#   Validation.Email=^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+\\.[a-zA-Z]{2,4}$
# 
# Then you can validate in your code against the pattern like this:
#     ESAPI.validator().isValidInput("User Email", input, "Email", maxLength, allowNull);
# Where maxLength and allowNull are set for you needs, respectively.
#
# But note, when you use boolean variants of validation functions, you lose critical 
# canonicalization. It is preferable to use the "get" methods (which throw exceptions) and 
# and use the returned user input which is in canonical form. Consider the following:
#  
# try {
#    someObject.setEmail(ESAPI.validator().getValidInput("User Email", input, "Email", maxLength, allowNull));
#
#Validator for atrribute of user input 
Validator.attribute=[\\w%_\\*][\\w\\s\\.\\-\\*_%]*
#Validator for account of user input
Validator.account=[\\w]+
#Validator for a Log
Validator.log=[\\w:.\\s\\[\\]><\\-\\{\\},\\(\\)\\*=?'"]*
#Validators for SQL
#List of SQL Regular Expressions needed 
Validator.sqlRegularExpressions=Validator.sqlGeneral
#Valid table or column name
Validator.sqlTableColumnName=[a-zA-Z0-9]\\w*
Validator.sqlGeneral=(((\\x27)|(\\'))\\s(((\\x6F)|o|O|(\\x4F))((\\x72)|r|R|(\\x52)))|((\\x22)|(\\\")|(\\-\\-)|(\\x23)))
#Validator for email
Validator.email=[\\w\\.%\\'\\-]+@[\\w\\.\\-]+\\.[a-zA-Z]{2,4}
Validator.date=((\\d{2})\\/(\\d{2})\\/(\\d{4})\\s?((1[0-2]|0[1-9]|[1-9]):([0-5][0-9])\\s?([AaPp][Mm]))?)
#Validator for path of user input 
Validator.path=[\\w.\\-_\\/\\s\\:]+